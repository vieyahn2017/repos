首页
如何从零写一个kv数据库？
还在上学，想自己试着写一个kv数据库，不知道凭自己的水平能不能实现，求大家给点建议和方向


?
9 个回答
默认排序?
cholerae
cholerae
菜鸡一个，啥都不会
101 人赞同了该回答
我感觉 
@Leviathan
 的答案更像是"如何从零写一个kv服务器"，而不是“如何从零写一个kv数据库”。我理解题主的重点应该是 kv 存储引擎吧。


kv 存储引擎底层无非就那么几种数据结构：bitcask, LSM Tree, B Tree 等等。其中 bitcask 应该是最好理解也是最容易实现的，无非就是一个哈希，不做优化只有几百行代码。


题主可以从 bitcask 写起，然后分析 bitcask 的优劣，再去考虑其他结构相比 bitcask 解决了哪些问题，产生了哪些新问题。


几个代码参考，都是代码规模不太大方便阅读的：

Leviathan1995/Biu 帮 
@Leviathan
 打个广告，这里面有比较纯粹的 bitcask 实现。

douban/beansdb 豆瓣的基于 bitcask 的分布式 kv，但是中间为了方便数据同步用了哈希树，还有一些杂七杂八的东西，稍微复杂一点。

leveldb 这个太有名了就不放链接了。LSM Tree。

weicao/cascadb buffered B Tree

另外国外还有人写过一系列博客，教你如何实现 kv 存储引擎：Implementing a Key-Value Store


正好我最近也在写一个 kv 存储引擎，与题主共勉。

编辑于 2017-05-06
101
?8 条评论
?分享
?收藏
?感谢
?
伍风
伍风
NoSQL数据库/Berkeley DB/数据库内核 developer
29 人赞同了该回答
如果是实现一个KV存储引擎，可以分步骤来实现：

第一步：实现一个内存版，支持单线程的BTree数据结构，当然可以选择其他数据结构，比如Hash Table，或者LSM

第二步：在第一步的基础上，实现支持多线程的Btree数据结构。可能需要了解一下，BTree加锁的方法

第三步：前面两步实现了内存版的BTree，这一步实现另外两个功能，在关闭程序时，将内存中的BTree写入文件；在启动程序时，从文件中读取BTree到内存中。这一步就要涉及到文件格式的设计，现在选择的方式很多，这里不展开。

第四步：上面三步实现了一个可序列化的Btree数据结构，只在程序结束时保存数据到文件中，但是内存是有限的，往往不够用，因此需要实现一个后台线程，这个线程要监控内存的使用情况，如何内存不够，就将内存中的数据写到文件中。除此外，还需要修改一下此前的数据结构，使它能够同时支持在文件和内存中查找数据。

第五步：实现事务。数据库事务有四个特性，就是ACID，原子性，一致性，隔离性，以及持久性。这些就要涉及到数据库日志文件，另外还有数据库并发，以及数据库的恢复，这些比较复杂，需要一段时间学习和理解。

第六步：添加检查点功能，checkpoint是数据库恢复中的一个很重要的功能。可以算是数据库日志的一部分，我单独分出来，是因为实现好有点难。关于它的原理可以去看数据库恢复相关的文章。

第七步：优化。前面六步只能实现一个简单的kv数据存储引擎，还需要不断优化才能保证它正确，稳定以及高效地运行。

以上七个步骤是从零到一实现一个KV数据存储引擎的基本步骤，希望能帮到你。
发布于 2017-05-07
29
?添加评论
?分享
?收藏
?感谢
?
匿名用户
匿名用户
4 人赞同了该回答
adamierymenko/kissdb

github上一个简单的kv实现。

进阶可以参考LevelDB，代码看不懂可以参考淘宝那岩写的源码阅读资料，另一个大佬详细版的资料leveldb。CSDN上也有很多LevelDB相关的资料，自己学会甄别。

如果LevelDB的代码熟悉之后还想做进一步的了解，可以看看facebook的RocksDB等变种，也可以Google Scholar搜一些LevelDB相关的论文，实现这些论文的改进，与论文给出的测试结果对比。

发布于 2017-05-07
4
?添加评论
?分享
?收藏
?感谢
?
匿名用户
匿名用户
27 人赞同了该回答
还在上学，想自己试着写一个kv数据库，不知道凭自己的水平能不能实现
假如题主是计算机专业的, 写一个简单的kv数据库还是不难的.当初我打算写一个编译器的时候也是感觉自己水平不够，后来发现flex bison 这些工具都是现成的, 后端再加上llvm, 自己如果明白整个原理，把它们组装起来还是不难的。


实现kv推荐题主底层用rocksdb或leveldb, 可以考虑自己实现redis协议，这样redis的客户端可以直接拿来用，就不用自己写了，甚至网络库也不用自己写，直接使用开源的libevent, libuv就行。中间加一个proxy，用来对客户端的请求进行处理，对一些简单的部分可以做一些优化, 比如负载均衡.后期实现还可以加一个monitor，可以用来解决hotkeys等一些周边问题。

下面是我自己画的一个图，供题主参考。




遇到瓶颈可以参考一下antirez/redis 的代码，或者参与国内的一些kv项目，有什么设计实现的问题可以在issue里提,比如ideawu/ssdb,Qihoo360/pika。 pika项目我贡献过几个pr,虽然都是帮助实现几个命令，并没有参与到核心的代码，但也帮助我理解了整个项目的原理,

编辑于 2017-07-26
27
?8 条评论
?分享
?收藏
?感谢
?