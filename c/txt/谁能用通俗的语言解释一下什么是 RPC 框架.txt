谁能用通俗的语言解释一下什么是 RPC 框架？
已关注写回答
开发框架
Java
Netty
远程过程调用协议RPC（Remote Procedure Call Protocol)
谁能用通俗的语言解释一下什么是 RPC 框架？
了解到最近 Java 的 Netty 很火，只知道它是这样类型的一种框架。想了解一下它主要用于解决了什么问题？适用于什么样的场景？


关注者
3,579
被浏览
486,299
他们也关注了该问题hi大头鬼hi徐飞
已关注写回答
?4 条评论
?分享
?邀请回答
?举报
?
50 个回答
默认排序?
用心阁
用心阁
软件工程师
1,383 人赞同了该回答
关于RPC
你的题目是RPC框架，首先了解什么叫RPC，为什么要RPC，RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。

比如说，一个方法可能是这样定义的：
Employee getEmployeeByName(String fullName)
那么：
首先，要解决通讯的问题，主要是通过在客户端和服务器之间建立TCP连接，远程过程调用的所有交换的数据都在这个连接里传输。连接可以是按需连接，调用结束后就断掉，也可以是长连接，多个远程过程调用共享同一个连接。
第二，要解决寻址的问题，也就是说，A服务器上的应用怎么告诉底层的RPC框架，如何连接到B服务器（如主机或IP地址）以及特定的端口，方法的名称名称是什么，这样才能完成调用。比如基于Web服务协议栈的RPC，就要提供一个endpoint URI，或者是从UDDI服务上查找。如果是RMI调用的话，还需要一个RMI Registry来注册服务的地址。
第三，当A服务器上的应用发起远程过程调用时，方法的参数需要通过底层的网络协议如TCP传递到B服务器，由于网络协议是基于二进制的，内存中的参数的值要序列化成二进制的形式，也就是序列化（Serialize）或编组（marshal），通过寻址和传输将序列化的二进制发送给B服务器。
第四，B服务器收到请求后，需要对参数进行反序列化（序列化的逆操作），恢复为内存中的表达方式，然后找到对应的方法（寻址的一部分）进行本地调用，然后得到返回值。
第五，返回值还要发送回服务器A上的应用，也要经过序列化的方式发送，服务器A接到后，再反序列化，恢复为内存中的表达方式，交给A服务器上的应用


（图片来源：https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html）
为什么RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如比如不同的系统间的通讯，甚至不同的组织间的通讯。由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用，

RPC的协议有很多，比如最早的CORBA，Java RMI，Web Service的RPC风格，Hessian，Thrift，甚至Rest API。

关于Netty
而Netty框架不局限于RPC，更多的是作为一种网络协议的实现框架，比如HTTP，由于RPC需要高效的网络通信，就可能选择以Netty作为基础。除了网络通信，RPC还需要有比较高效的序列化框架，以及一种寻址方式。如果是带会话（状态）的RPC调用，还需要有会话和状态保持的功能。

大体上来说，Netty就是提供一种事件驱动的，责任链式（也可以说是流水线）的网络协议实现方式。网络协议包含很多层次，很多部分组成，如传输层协议，编码解码，压缩解压，身份认证，加密解密，请求的处理逻辑，怎么能够更好的复用，扩展，业界通用的方法就是责任链，

一个请求应答网络交互通常包含两条链，一条链（Upstream）是从传输层，经过一系列步骤，如身份认证，解密，日志，流控，最后到达业务层，一条链（DownStream）是业务层返回后，又经过一系列步骤，如加密等，又回到传输层。 


（图片来源：ChannelPipeline (The Netty Project API Reference (3.2.6.Final))）
这样每一层都有一个处理接口，都可以进行不同的操作，比如身份认证，加解密，日志，流控，将不同的处理实现像拼积木那样插接起来就可以实现一个网络协议了（快速开发）。每一层都有自己的实现，上层不需要关注面向网络的操作（可维护）。Netty已经提供了很多实现。


（图片来源：http://docs.jboss.org/netty/3.1/guide/html/architecture.html）
当然Netty还有许多好处，比如对非阻塞IO（NIO）的支持，比如在链上传递时最大程度的减少buffer的copy（高性能）。
编辑于 2015-09-06
1.4K
?26 条评论
?分享
?收藏
?感谢
?
收起
洪春涛
洪春涛
做系统的
346 人赞同了该回答
没有邀请，强答一波。

先说说原理。



本地过程调用

RPC就是要像调用本地的函数一样去调远程函数。在研究RPC前，我们先看看本地调用是怎么调的。假设我们要调用函数Multiply来计算lvalue * rvalue的结果:

1 int Multiply(int l, int r) {
2    int y = l * r;
3    return y;
4 }
5 
6 int lvalue = 10;
7 int rvalue = 20;
8 int l_times_r = Multiply(lvalue, rvalue);
那么在第8行时，我们实际上执行了以下操作：

将 lvalue 和 rvalue 的值压栈
进入Multiply函数，取出栈中的值10 和 20，将其赋予 l 和 r
执行第2行代码，计算 l * r ，并将结果存在 y
将 y 的值压栈，然后从Multiply返回
第8行，从栈中取出返回值 200 ，并赋值给 l_times_r
以上5步就是执行本地调用的过程。



远程过程调用带来的新问题

在远程调用时，我们需要执行的函数体是在远程的机器上的，也就是说，Multiply是在另一个进程中执行的。这就带来了几个新问题：

Call ID映射。我们怎么告诉远程机器我们要调用Multiply，而不是Add或者FooBar呢？在本地调用中，函数体是直接通过函数指针来指定的，我们调用Multiply，编译器就自动帮我们调用它相应的函数指针。但是在远程调用中，函数指针是不行的，因为两个进程的地址空间是完全不一样的。所以，在RPC中，所有的函数都必须有自己的一个ID。这个ID在所有进程中都是唯一确定的。客户端在做远程过程调用时，必须附上这个ID。然后我们还需要在客户端和服务端分别维护一个 {函数 <--> Call ID} 的对应表。两者的表不一定需要完全相同，但相同的函数对应的Call ID必须相同。当客户端需要进行远程调用时，它就查一下这个表，找出相应的Call ID，然后把它传给服务端，服务端也通过查表，来确定客户端需要调用的函数，然后执行相应函数的代码。
序列化和反序列化。客户端怎么把参数值传给远程的函数呢？在本地调用中，我们只需要把参数压到栈里，然后让函数自己去栈里读就行。但是在远程过程调用时，客户端跟服务端是不同的进程，不能通过内存来传递参数。甚至有时候客户端和服务端使用的都不是同一种语言（比如服务端用C++，客户端用Java或者Python）。这时候就需要客户端把参数先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。这个过程叫序列化和反序列化。同理，从服务端返回的值也需要序列化反序列化的过程。
网络传输。远程调用往往用在网络上，客户端和服务端是通过网络连接的。所有的数据都需要通过网络传输，因此就需要有一个网络传输层。网络传输层需要把Call ID和序列化后的参数字节流传给服务端，然后再把序列化后的调用结果传回客户端。只要能完成这两者的，都可以作为传输层使用。因此，它所使用的协议其实是不限的，能完成传输就行。尽管大部分RPC框架都使用TCP协议，但其实UDP也可以，而gRPC干脆就用了HTTP2。Java的Netty也属于这层的东西。
所以，要实现一个RPC框架，其实只需要把以上三点实现了就基本完成了。

Call ID映射可以直接使用函数字符串，也可以使用整数ID。映射表一般就是一个哈希表。

序列化反序列化可以自己写，也可以使用Protobuf或者FlatBuffers之类的。

网络传输库可以自己写socket，或者用asio，ZeroMQ，Netty之类。



最后，有兴趣的可以看我们自己写的一个小而精的RPC库 tinyrpc（hjk41/tinyrpc），对于理解RPC如何工作很有好处。

最最后，我司（https://fma.ai）长期招收各种有志于做分布式系统的实习生和全职员工。欢迎私信联系。

编辑于 2017-08-30
346
?33 条评论
?分享
?收藏
?感谢
?
收起
IT-风水师
IT-风水师
我真的只会看代码风水~
127 人赞同了该回答
Netty只是网络通信框架，把Java Socket的API又封装了一次，使得你可以用最少的代码来完成网络通信这一任务。

回到RPC 上，我的看法和 
@肖继潮
 略有不同。

根据字面意思来推断，RPC 的确是为了进程间通信而准备的，但构造成函数调用这一形式，是因为这是在抽象上最合理的。

我们可以推断演进一下
====
1. A B 两个进程之间需要进行数据交换。
2.于是我们想出来在某个内存区域划出一个空间，然后向该空间中写入和读取数据。（共享文件也可以）(常见的socket就是这一共享内存的抽象，只是现在大多指网络通路)
3.A B 通信完成。
====
4.A B需要完成更复杂的交互
5.于是我们指定一个协议,A B 根据该协议对数据的进行编码解码，根据协议内容做出决策。
====
6.发现协议过于复杂(比如 编号1代表调用 a函数，编号2代表b函数) 
7.试图优化协议，将函数参数和调用的函数名称作为协议的一部分，函数返回值类似
8.RPC达成
=====
9.表现出来的特性就是，object invok(parameter)，就代表了，序列化 parameter 对象到中间格式，利用远程服务器的 invok 函数进行处理 ，同时将返回的数据解码生成 object对象。

======总结=====

RPC 在整个过程中，体现了逐层抽象，将复杂的协议编解码和数据传输封装到了一个函数中。

======缺点=====
单一 RPC 无法实现 push,即推送服务。
理由是，RPC 是client 调用 server获取数据，是一个完整的过程，实现不了server调用client。
解决方案：让client 既可以调用server上的RPC服务，反之client本身也成为一个RPC服务让Server来调用。

=====回到题主的问题====
1. Netty只是网络通信框架,目的是让你用最少的代码构建出足够支撑网络通信的功能。

2.完成RPC 需要两个协议： 对象序列化协议 和 调用控制协议

常见例子举例：

1.zeroC ICE，拥有自己的网络通信框架 + ICE 调用控制协议和对象序列化协议,同时也涵盖了服务组件的抽象部署等功能。

2.thrift，有自己的网络通信框架+thrift 对象序列化协议+thrift 调用控制协议

3.probuff，只是 对象序列化协议

4.XMLRPC ，jsonRPC，常见的语境是利用HTTP协议作为调用控制协议,XML 和 JSON 作为对象序列化之后的格式。

5.其他的大概也差不多了。
发布于 2014-12-31
127
?13 条评论
?分享
?收藏
?感谢
?
收起
肖继潮
肖继潮
IT教育
279 人赞同了该回答
泻药。

早期单机时代，一台电脑上运行多个进程，大家各干各的，老死不相往来。假如A进程需要一个画图的功能，B进程也需要一个画图的功能，程序员就必须为两个进程都写一个画图的功能。这不是整人么？于是就出现了IPC（Inter-process communication，单机中运行的进程之间的相互通信）。OK，现在A既然有了画图的功能，B就调用A进程上的画图功能好了，程序员终于可以偷下懒了。


到了网络时代，大家的电脑都连起来了。以前程序只能调用自己电脑上的进程，能不能调用其他机器上的进程呢？于是就程序员就把IPC扩展到网络上，这就是RPC（远程过程调用）了。现在不仅单机上的进程可以相互通信，多机器中的进程也可以相互通信了。

要知道实现RPC很麻烦呀，什么多线程、什么Socket、什么I/O，都是让咱们普通程序员很头疼的事情。于是就有牛人开发出RPC框架（比如，CORBA、RMI、Web Services、RESTful Web Services等等）。

OK，现在可以定义RPC框架的概念了。简单点讲，RPC框架就是可以让程序员来调用远程进程上的代码一套工具。有了RPC框架，咱程序员就轻松很多了，终于可以逃离多线程、Socket、I/O的苦海了。

至于最近Java中流行的Netty，没玩过。但是大致了解过，Netty、Mina是游戏行业做服务器开发的Java程序员用的比较多的PRC框架（我们学生主要是Java方向的，有不少人毕业后从事游戏开发）。据说互联网公司用的也比较多。这两行业都有高并发量的、长连接、分布式、异步通讯、大数据量等特点。Netty这种RPC框架封装和优化了Java NIO和异步网络编程的一些繁琐的细节，一方面可以让开发者专注于业务逻辑的实现，一方面只需要调用Netty封装的API就可以很快编写出高性能的服务器。

抱歉，知识有限，只能答到这里了。
发布于 2014-09-26
279
?30 条评论
?分享
?收藏
?感谢
?
得闲野鹤
得闲野鹤
尚马教育Java培训讲师；KK点歌技术顾问
58 人赞同了该回答
上面把文档之类的都搬上来了,然而我估计大部分人都很难沉下心来一点点看完,我来说一些通俗一点的.

我们在做一个访问量不大的项目的时候,一台服务器部署上一个应用+数据库也就够了.

那么访问量稍微大一点之后呢,为了解决用户反馈的卡,反应慢的情况,我们就上集群.架设nginx,部署多个服务,由nginx负责把请求转发到其他服务上,这样就解决了用户说的卡慢问题.

过了一段时间之后呢,我们发现数据库已经扛不住了,应用服务完好,数据库有时候宕机. 那这个时候呢,我们就上数据库读写分离,再架设几台数据库服务器,做主从,做分库分表. 然后数据库也不宕机了,服务又恢复了流畅.

又过了一段时间,公司事业增增日上,服务访问量越来越高,且大部分都是查询, 吸取之前宕机且为了办证数据库的健壮性,我们这个时候又加上了缓存, 把用户高频次访问的数据放到缓存里.

后来,项目功能越来越多,整个项目也愈发庞大,修改一个类就需要全盘上传,切换nginx重启,这样的发布流程越来越长,越来越繁杂.然后我们开始把模块拆分,用户信息分个项目,订单系统分一个项目.这样就达到了,用户模块代码修改的时候,只需要更新用户信息服务就好了.但是还是需要切换顶层的nginx.把要重启的服务的流量切到可用服务上. 这个时候我们就想到了RPC

那么RPC解决了什么呢? 所有的服务在启动的时候注册到一个注册机里面,然后顶层处理在接收到nginx的请求时,去注册机找一个可用的服务,并调用接口. 这样子呢,在不加新功能的时候,顶层处理服务我们就不需要动了? 那修改了用户信息项目的时候,我们只需要一个个更新用户信息项目的服务群就好了?

这样的话,无论是扩展还是服务的健壮性都妥妥的了?

发布于 2017-03-31
58
?7 条评论
?分享
?收藏
?感谢
?
刘鹏
刘鹏
83 人赞同了该回答
RPC, 远程过程调用直观说法就是A通过网络调用B的过程方法。

通信中的协议是你自己规定的，比如你可以规定说当A向B发送数字1, B就打印hello world, 并返回数字1给A, 如果发送数字2，B就打印hello, guy.并发送数字2给A.

这就是一个简单的RPC示例，实际上natty就是干这个的，只不过它提供一套框架给你，让你可以定义自己的规则，实现B里面的函数。

我们来想一想，当A要把数字1发送给B要怎么办呢，你需要用socket，B是server, A是client， B执行完以后再把1通过socket写回即可。你可以用AUPE书中的例子很容易就构建出来。

问题到这里，应该就结束了，事实上就是这么简单，那为什么需要RPC框架呢？

当你给B发送1或者2就可以区分函数方法，但是你不可能写100个函数打印100个字符，你需要在发送1的时候，再接着发送一个字符串，这样B只要实现一个通用的print函数就够了。

我们继续思考，当你想发送一个数字比如65534给B的时候，我们知道socket是按照字节接受数据的，一个字节最大为255也就是0xff, 如果要发送65534你有两种方法，第一把65534当作5个字符6,5,5,3,4然后让socket接受5个字符。第二，你可以把65534变成二进制0xfffe, 这样你可以先发送一个0xff再发送一个0xfe,也就是先发一个255再发一个254再拼装。

另外在拼装这255和254的时候，我们知道不同体系结构的CPU字节序是不一样的，因此，你需要解决大端小端字节序的问题。否则对于一个32位机器上，65534作为一个int型可能会是0xfffe0000,或者0x0000feff，这取决于你如何发送和打包它。

对于相对复杂的RPC, 我们发送的一个数据包往往既包含字符串又包含数字，这样我们就需要把他们切割开来然后分别解码编码。

这个部分就叫做序列化反序列化，在高级一点的RPC框架中，甚至可以做到把
一个类从A扔给B.用到的还是这个方法，只是把类这个类型也放进去了。

对于脚本语言比如Lua，你甚至可以把编译过后的字节码发给远程，然后在B用Lua虚拟机执行。

所以对于一个完整的RPC框架底层往往是socket搭配序列化反序列化的工作。

问题到这里，一个RPC分析应该也结束了, 实际上要想把一个RPC做稳定了，还有几个问题。

首先，要想让一个RPC能够更高效，往往做到让A可以连续向B发送请求，这就要求在协议解析的时候区分两个包，在TCP分包的时候这里有个问题叫做半包和粘包。

另外B也无需在返回完函数1以后再返回函数2，这就要求在返回的时候，A能够区分开来，这就要求在协议里面加入session.

高效的写法不但在编解码和协议设计理念，还需要在编写socket server时候，尽可能降低阻塞调用，用异步来做，这有一大推开源方案，比如libev.

netty就是一个这样异步的RPC通信框架。

当然，在实际项目中，我们只是需要解决实际问题，完全没必要从头构建，你可以选一个通信协议比如protobuf/JSON/msgpack/thrift等等再找他相关的RPC库使用即可。

当然完全可以自己定制。

一个好的框架不只是解决最基本的问题，它更像是一个生态系统，比如我看到netty还有SSL的部分，DNS部分。

Have Fun.
编辑于 2015-07-07
83
?6 条评论
?分享
?收藏
?感谢
?
收起
Doing
Doing
微信公众号：EnjoyMoving
5 人赞同了该回答
RPC：远程调用。通过RPC框架，使得我们可以像调用本地方法一样地调用远程机器上的方法：

1、本地调用某个函数方法

2、本地机器的RPC框架把这个调用信息封装起来（调用的函数、入参等），序列化(json、xml等)后，通过网络传输发送给远程服务器

3、远程服务器收到调用请求后，远程机器的RPC框架反序列化获得调用信息，并根据调用信息定位到实际要执行的方法，执行完这个方法后，序列化执行结果，通过网络传输把执行结果发送回本地机器

4、本地机器的RPC框架反序列化出执行结果，函数return这个结果

服务调用端（本地机器）：


服务提供端（远程机器）：


Java Netty 是在TCP(Socket)层对nio进行封装的框架，在RPC框架中可用于解决网络传输问题。

现在流行的微服务框架（dubbo、spring cloud等），实际上就是各种各样的RPC框架

编辑于 2017-12-30
5
?添加评论
?分享
?收藏
?感谢
?
郑大侠
郑大侠
http://code.zhizus.com
48 人赞同了该回答
RPC（Remote Procedure Call Protocol）――远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。
RPC简单的来说就是像调用本地服务一样调用远程服务。


那么，netty是什么东西呢，跟RPC有什么关系？

Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序
RPC要做到用户无感知的调用远程服务必定要经过网络传输，而netty正好是是Java编写的快速开发高性能高可靠性的网络编程框架。


目前使用netty作为传输层的RPC框架很多，国内知名的有dubbo，motan等。


下面以新浪开源的motan为例，说明netty在RPC的位置：

下图中transport即使使用netty实现的。



总结来说，netty就是解决RPC网络传输的。



分布式RPC需要解决哪些问题呢？

protocol：传输协议
proxy：client代理，服务引用方调用方法通过代理发送远程消息
codec：协议编解码压缩等
transport：协议传输
registry：注册中心，服务注册服务发现
cluster：负载均衡，服务容错策略
其他：服务降级，服务隔离，服务治理
如何实现一个分布式的RPC框架呢？

现在互联网已经很少单点服务了，一个好的rpc框架能帮我们省掉很多工作，那么如何撸一个自己喜欢的RPC框架呢？

现在写rpc框架已经不难了，我们可以有很多参考，很多成熟的第三方开源项目可以依赖，可以说是站在巨人的肩膀上。

第一步，选择传输协议：

高性能的rpc和良好的编码协议是分不开的。好的协议不仅耗用流量小，而且序列化和反序列化更快。

现在比较流行的协议有thrift，protobuf，json，restful等。其中thrfit和protobuf性能都比较优异，而且占用空间小，最重要的是跨语言，具有语言平台无关性。但，美中不足的是他们都需要预先根据协议文件预先生成好代码。开发极不流畅。

我们也可以自定义协议，像dubbo和motan一样，定制自己的私有协议，

比如motan协议的header部分如下：



body部分采用hession或者fastjson序列化，

如果不考虑跨语言，这种算是比较完美的解决方案。


定义协议过程中的一些重要且容易忽略的问题：

协议版本号
消息id
协议扩展字段
第二步，协议传输层

一个高性能RPC框架最重要的四个点就是：传输协议，框架线程模型，IO模型，零拷贝。

java程序如果能做好这四点，那么性能应该不会比c++程序差多少。

而作为java开发者，netty正好解决了后三个点，所以使用netty作为RPC框架的传输层会事半功倍。

第三部，注册中心的选择

现在有很多提供服务注册发现的服务，实现成本比较低就是zookeeper，可以很容易的实现服务注册和服务发现的功能。


解决了这三部，后面的就得脚踏实地码代码了，当然后续会有很多细节，不过都不是问题，现在有好多成熟的开源框架可以参考。


当然也可以参考我最近实现的分布式RPC框架，也欢迎提issue(后续会持续优化)。

自己撸一个RPC还是很不错的，如果有兴趣建议自己撸一遍玩玩。

下面是广告时间>>>>>>>>>

dempeZheng/forestRPC 基于netty, spring,轻量的高性能分布式RPC服务框架

Overview

基于netty, spring,轻量的高性能分布式RPC服务框架。简单，易用，高效。

Features

服务端支持多种序列化方式：fastjson，hession，kryo
服务端支持多种压缩方式：gzip，snappy
服务端可根据group进行线程隔离，支持基于spring对不同的group配置不同的业务线程池
支持注解配置，也支持spring xml配置
支持服务发现服务注册
client端支持多种负载均衡策略和容灾策略
client内置连接池
基于netty 4.x版本实现，高性能（win 8cpu单机8w+）
TODO

服务降级功能
http服务支持
跨语言协议支持
服务治理管理后台
编辑于 2017-04-24
48
?6 条评论
?分享
?收藏
?感谢
?
收起
hi大头鬼hi
hi大头鬼hi
全栈工程师，阿里内推
19 人赞同了该回答
你妈妈电脑系统出问题了，你使用qq远程助手，帮她修复系统，这中间，你做的每一步都可以理解为一个rpc调用，本质上就是想操作你本机的代码一样调用远程机器上的代码
发布于 2017-08-29
19
?2 条评论
?分享
?收藏
?感谢
?
马秉尧
马秉尧
自由软件开发者，pecl 成员
30 人赞同了该回答
RPC(远程过程调用)是什么

简单的说，RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器）上的一个函数或方法（可以统称为服务）并得到返回的结果。
RPC 会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯）
RPC 是一个请求响应模型。客户端发起请求，服务器返回响应（类似于Http的工作方式）
RPC 在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。

远程过程调用发展历程

ONC RPC （开放网络计算的远程过程调用），OSF RPC（开放软件基金会的远程过程调用）
CORBA（Common Object Request Broker Architecture公共对象请求代理体系结构）
DCOM（分布式组件对象模型），COM+
Java RMI
.NET Remoting
XML-RPC，SOAP，Web Service
PHPRPC，Hessian，JSON-RPC
Microsoft WCF，WebAPI
ZeroC Ice，Thrift，GRPC
Hprose

早期的 RPC

第一代 RPC（ONC RPC，OSF RPC）不支持对象的传递。
CORBA 太复杂，各种不同实现不兼容，一般程序员也玩不转。
DCOM，COM+ 逃不出 Windows 的手掌心。
RMI 只能在 Java 里面玩。
.NET Remoting 只能在 .NET 平台上玩。

XML-RPC，SOAP，WebService

冗余数据太多，处理速度太慢。
RPC 风格的 Web Service 跨语言性不佳，而 Document 风格的 Web Service 又太过难用。
Web Service 没有解决用户的真正问题，只是把一个问题变成了另一个问题。
Web Service 的规范太过复杂，以至于在 .NET 和 Java 平台以外没有真正好用的实现，甚至没有可用的实现。
跨语言跨平台只是 Web Service 的一个口号，虽然很多人迷信这一点，但事实上它并没有真正实现。

PHPRPC

基于 PHP 内置的序列化格式，在跨语言的类型映射上存在硬伤。
通讯上依赖于 HTTP 协议，没有其它底层通讯方式的选择。
内置的加密传输既是特点，也是缺点。
虽然比基于 XML 的 RPC 速度快，但还不是足够快。

Hessian

二进制的数据格式完全不具有可读性。
官方只提供了两个半语言的实现（Java，ActionScript 和不怎么完美的 Python 实现），其它语言的第三方实现良莠不齐。
支持的语言不够多，对 Web 前端的 JavaScript 完全无视。
虽然是动态 RPC，但动态性仍然欠佳。
虽然比基于 XML 的 RPC 速度快，但还不是足够快。

JSON-RPC

JSON 具有文本可读性，且比 XML 更简洁。
JSON 受 JavaScript 语言子集的限制，可表示的数据类型不够多。
JSON 格式无法表示数据内的自引用，互引用和循环引用。
某些语言具有多种版本的实现，但在类型影射上没有统一标准，存在兼容性问题。
JSON-RPC 虽然有规范，但是却没有统一的实现。在不同语言中的各自实现存在兼容性问题，无法真正互通。

Microsoft WCF，WebAPI

它们是微软对已有技术的一个 .NET 平台上的统一封装，是对 .NET Remoting、WebService 和基于 JSON 、XML 等数据格式的 REST 风格的服务等技术的一个整合。
虽然号称可以在 .NET 平台以外来调用它的这些服务，但实际上跟在 .NET 平台内调用完全是两码事。它没有提供任何在其他平台的语言中可以使用的任何工具。

ZeroC Ice，Thrift，GRPC

初代 RPC 技术的跨语言面向对象的回归。
仍然需要通过中间语言来编写类型和接口定义。
仍然需要用代码生成器来将中间语言编写的类型和接口定义翻译成你所使用的编程语言的客户端和服务器端的占位程序（stub）。
你必须要基于生成的服务器代码来单独编写服务，而不能将已有代码直接作为服务发布。
你必须要用生成的客户端代码来调用服务，而没有其它更灵活的方式。
如果你的中间代码做了修改，以上所有步骤你都要至少重复一遍。

Hprose

无侵入式设计，不需要单独定义类型，不需要单独编写服务，已有代码可以直接发布为服务。
具有丰富的数据类型和完美的跨语言类型映射，支持自引用，互引用和循环引用数据。
支持众多传输方式，如 HTTP、TCP、Websocket 等。
客户端具有更灵活的调用方式，支持同步调用，异步调用，动态参数，可变参数，引用参数传递，多结果返回（Golang）等语言特征，Hprose 2.0 甚至支持推送。
具有良好的可扩展性，可以通过过滤器和中间件实现加密、压缩、缓存、代理等各种功能性扩展。
兼容的无差别跨语言调用
支持更多的常用语言和平台
支持浏览器端的跨域调用
没有中间语言，无需学习成本
性能卓越，使用简单
编辑于 2016-07-08
30
?5 条评论
?分享
?收藏
?感谢
?
